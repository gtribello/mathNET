<PAGE>
  <TITLE> Understanding the central limit theorem </TITLE>
  <HEADER>
     <script src="assets/scripts/plottingTools.js" type="text/javascript"> </script>
  </HEADER>
  <WELCOME>
     This exercise is going to teach you about the central limit theorem and confidence limits.  Use all your notes on these 
     types of random variables and all the resources you can find online as you work through this exercise.  Also make sure that you look 
     at the working python code that is generated from the blocks as ultimately you will want to use this code in your own programs.  
  </WELCOME>
  <WORKSPACE>
    <table>
      <tr>
        <td>
          <div id="visualization" style="width: 400px"> <canvas id="myCanvas" width="400" height="400"></canvas> </div>
        </td>
        <td width="10px"> nbsp;nbsp; </td>
        <td rowspan="2">
          <div id="blocklyDiv" style="height: 800px"> </div>
        </td> 
      </tr>
      <tr>
        <td> <div id="graph" style="width: 400px"></div> </td>
        <td width="10px"> nbsp;nbsp; </td>
      </tr>
    </table>
  </WORKSPACE>
  <APIFUNCTIONS>
  </APIFUNCTIONS>
  <BLOCKS>
  </BLOCKS>
  <SCRIPTS>
  </SCRIPTS>
  <STARTUP>
  <LEVEL>
    <DESCRIPTION>
       This exercise should be revision: Use the blocks below to generate 50 uniform random variables.  You should plot each of these 
       random variables on the graph.  The $i$th random variable you generate, $X_i$, should be at the coordinate $(i,X_i)$. 
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
    </FINISH>
  </LEVEL> 
  <LEVEL>
    <DESCRIPTION>
      Use the blocks below to generate 50 uniform random variables.  Now instead of plotting each of the random variables on the graph
      individually I would like you to plot points at $(i,\frac{1}{i}\sum_{j=1}^i X_j)$.  There should be 50 such points as $i$ should 
      take values from 1 to 50 and the sum should run over the random variables generated.  In your notes describe what happens to the 
      quantity that is plotted on the $y$ axis as $i$ increases.  Why does this quantity behave in this way?
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX> 
    <FINISH>
    </FINISH>
  </LEVEL> 
  <LEVEL>
    <DESCRIPTION>
      In the last exercise you should have seen that as $i$ increased $\frac{1}{i}\sum_{j=1}^i X_j$ converged towards a value of 0.5.
      This makes sense as the law of large numbers tells us that in the limit $n \rightarrow \infty$ the quantity 
      $\frac{1}{n}\sum_{i=1}^n X_i \rightarrow \mathbb{E}(X)$, where $\mathbb{E}(X)$ is the expectation of the random variable.  For our  
      case the expectation of our random variables is equal to 0.5 so the fact that this sum converges towards 0.5 makes sense.

      Lets now investigate if the values for $\mu_j=\frac{1}{n}\sum_{i=1}^n X_i$ that we generate for a particular value of $n$ have the same value.
      Use the code below to generate 10 values for $\mu_j=\frac{1}{n}\sum_{i=1}^n X_i$.  Each of these 10 values of $\mu_j$ should
      be generated by adding together 10 uniform random variables.  Plot each of these 10 points at $(j, \mu_j)$.  Are all the values of $\mu_j$ that 
      you obtain the same? 
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
    </FINISH>
  </LEVEL> 
  <LEVEL>
    <DESCRIPTION>
      You should have found that the values of $\mu_j$ that you generated were not all the same.  This makes a lot of sense as each one was calculated by adding together 
      a different set of random variables.  The values of all these sums of random variables are close, however, and much closer than the values of the underlying random 
      variables from which these sums are calculated.  The reason that these sample means are close is due to a theorem known as the central limit theorem.  This theorem 
      tells you that if you add together a sufficiently large number of independent random variables with expectation $\mu$ and variance $\sigam^2$ then the sample 
      mean (which is what we have called $\mu_j$ in the exercises above) is a random variable taken from a normal distribution with expectation $\mu$ and variance $\sigma^2/n$.
      As discussed in the videos on this topic the central limit theorem is enormously useful as it allows us to calculate confidence limits around estimates of expectations
      that are calculated by adding together random variables that are sampled from a distribution.  

      Use the equations from the video to calculate what the 90 % confidence limit, $\xi$, is for the sample means that you calculated during the previous exercise.  Use the blocks 
      below to add commands that draw lines at $0.5 +\xi$  and at $0.5 - \xi$.  With these lines in place repeat the previous exercise of generating the 10 values of $\mu$.  Comment 
      in your notes on what the range of values between the two lines you drew represent and on how frequently the sample means calculated in the previous exercise fall within this range.
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
    </FINISH>
  </LEVEL>
  <REVIEW>
     Remember that the expectation of the random variable we are working with here is equal to 0.5.  The two lines thus represent the range of values that the sample mean will fall into 
     90 % of the time.  The reason for this is of course connected to the fact that  the central limit theorem ensures that the sample mean is a random variable from a normal distribution 
     with a particular variance.

     The net result is that most of you will see that 9 of the sample means you generate fall within the 90 % confidence limits and that one falls outside of the 90 % confidence limits.  Some
     of you may see different results from this, however, because we are dealing with random variables.  

     To consolidate what you have learnt write a python notebook to estimate the $p$ parameter for a Bernoulli random variable that is equal to one when a sample mean calculated from 
     20 uniform random variables falls within the 90 % confidence limit of the true expectation for these random variables and that is zero otherwise.  In your code you should also 
     calculate error bars that represent a 90 % confidence limit on your estimate of the parameter.
  </REVIEW>
</PAGE>
