<PAGE>
  <TITLE> Computing a correlation function </TITLE>
  <HEADER>
     <script src="assets/scripts/isingSpinControls.js" type="text/javascript"> </script>
     <script src="assets/scripts/plottingTools.js" type="text/javascript"> </script>
  </HEADER>
  <WELCOME>
     In this exercse we are going to learn how to write programs that calculate a correlation function between two random variables.  We are going to do this by learning how to calculate a correlation function for a one dimensional ising model.  In this exercise the one dimensional ising model will have a closed geometry.
  </WELCOME>
  <WORKSPACE>
    <table>
      <tr>
        <td>
          <div id="visualization" style="width: 400px"> <canvas id="myCanvas" width="400" height="400"></canvas> </div>
        </td>
        <td width="10px"> nbsp;nbsp; </td>
        <td rowspan="2">
          <div id="blocklyDiv" style="height: 800px"> </div>
        </td>
      </tr>
      <tr>
        <td> <div id="graph" style="width: 400px"></div> </td>
        <td width="10px"> nbsp;nbsp; </td>
      </tr>
    </table>
  </WORKSPACE>
  <APIFUNCTIONS>
    // Add graph functions to API
    addGraphFunctionsToApi( interpreter, scope );
    // Add ising functions to API
    addIsingFunctionsToApi( interpreter, scope );

    // Add API function for printing energy
    var wrapper = function(id){
      id = id ? id.toString() : '';
      return interpreter.createPrimitive(myApp.printEnergy(id));
    };
    interpreter.setProperty(scope, 'printEnergy', interpreter.createNativeFunction(wrapper));
  </APIFUNCTIONS>
  <BLOCKS>
    Blockly.Blocks["print_correlation"] = {
      init: function() {
        this.jsonInit({
          "message0": "print correlation %1",
          "args0": [
            {
              "type": "input_value",
              "name": "n", 
              "check": "Number"
            }
          ],
          "inputsInline": true,
          "nextStatement": null,
          "previousStatement": null,
          "colour": Blockly.Blocks.variables.HUE,
          "tooltip": Blockly.Msg.VARIABLES_SET_TOOLTIP,
          "helpUrl": Blockly.Msg.VARIABLES_SET_HELPURL
        })
      }
    };

    Blockly.JavaScript['print_correlation'] = function(block) {
      var s = Blockly.JavaScript.valueToCode(block, 'n', Blockly.JavaScript.ORDER_ATOMIC) || '0';
      var code = 'printEnergy(' + s + ');\n';
      return code;
    };

    Blockly.Python['print_correlation'] = function(block) {
      var s = Blockly.Python.valueToCode(block, 'n', Blockly.Python.ORDER_ATOMIC) || '0';
      var code = 'print("Correlation equals",' + s + ')\n';
      return code;
    };
  </BLOCKS>
  <SCRIPTS>
    myplot.data = [];

    // Load the Google Chart Tools Visualization API and the chart package.
    if (typeof google == 'object') {
      google.load('visualization', '1', {packages: ['corechart']});
    } else {
      alert('Unable to load Google\'s chart API.\n' +
            'Are you connected to the Internet?');
    }

    myApp.firstCorrelation = 0;
    myApp.mismatchedEnergy = true;
 
    myApp.calcCorrelation = function( r ){
      // Calculate average spin
      var average = 0; for(var i = 0; i &lt; ising.spins.length; i++){ average += ising.spins[i]; }
      average = average / ising.spins.length;
      // Now calculate average correlation
      var cor=0; var norm = 0;
      for(var i = 0; i &lt; ising.spins.length; i++){
          cor += (ising.spins[i]-average)*(ising.spins[(i+r)%ising.spins.length]-average);
          norm += (ising.spins[i]-average)*(ising.spins[i]-average);
      }
      return cor/norm;
    }; 
 
    myApp.printEnergy = function( eng ){
      ctx = document.getElementById("myCanvas").getContext("2d");
      ctx.beginPath();
      ctx.moveTo( 100,100 );
      ctx.lineTo( 100,300 );
      ctx.lineTo( 300,300 );
      ctx.lineTo( 300,100 );
      ctx.lineTo( 100,100 );
      ctx.closePath();
      ctx.fillStyle = '#FFFFFF';
      ctx.fill(); myApp.mismatchedEnergy = false;
      if( myApp.mylevel==0 ) { 
          if( myApp.calcCorrelation(2) != eng ){ myApp.mismatchedEnergy = true; }
      } else if( myApp.mylevel==1 ) {
          if( (myApp.firstCorrelation + myApp.calcCorrelation(2)) != 2*eng ) { 
               myApp.mismatchedEnergy = true; 
          }
      }

      ctx.fillStyle = '#000000';
      ctx.font="20px Georgia";
      ctx.fillText("Correlation equals " + eng,110,180);
    };
  </SCRIPTS>
  <STARTUP>
    ising.radius=200;
    ising.setNumberOfSpins(10);
    ising.setMagneticField(3);
    ising.generateRandomState();
  </STARTUP>
  <LEVEL>
    <DESCRIPTION>
      The segments of the wheel on the right indicate the values of 100 non-interacting spins in a magnetic field.
      The degree of correlation between two spins that are separated by $r$ lattice sites is measured using
      $\delta(r) = \frac{ \sum_{i=1}^N ( s_i - \langle s \rangle )( s_{i+r} - \langle s \rangle ) }{ \sum_{i=1}^N ( s_i - \langle s \rangle )^2 }$
      where $\langle s \rangle$ is the average spin for the system.  Use the blocks provided to calculate the degree of correlation between the spins
      that are two lattice sites appart.  Once you have calcualted this quantity print it to screen using the print correlation block.
    </DESCRIPTION>
    <HINT> 
       You will need to know about modulo arithmatic.  An example of some modulo arithmatic is 4%3 = 1.  You can access this function using the remainder block.
    </HINT>
    <STARTUP>
      ising.generateRandomState();
    </STARTUP>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_modulo"></block>
      </category>
      <category name="Microstate">
         <block type="get_nspins"></block>
         <block type="get_field"></block>
         <block type="get_spin"></block>
         <block type="print_correlation"></block>
      </category>
    </TOOLBOX>
    <FINISH>
       levelcomplete = !myApp.mismatchedEnergy
    </FINISH>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
      Now calculate the degree of correlation between the spins that are two lattice sites appart in this first configuration.  Then generate a new 
      configuration using the generate microstate block and recalculate the correlation.  Output the average of the correlation between the spins
      that are two lattice sites appart for the two configurations you generated using the print correlation block.  Remember that the degree of 
      correlation between two spins that are separated by $r$ lattice sites is measured using
      $\delta(r) = \frac{ \sum_{i=1}^N ( s_i - \langle s \rangle )( s_{i+r} - \langle s \rangle ) }{ \sum_{i=1}^N ( s_i - \langle s \rangle )^2 }$
      N.B. To test if your code is correct the browser will calculate the correleation function for the initial microstate that was generated and the correlation
      function for the microstate that is loaded when the print correlation function block is executed.  The mean for these two microstate is then 
      compared with the mean that you print using the print correlation function block.
    </DESCRIPTION>
    <HINT>
    </HINT>
    <STARTUP>
      ising.generateRandomState();
      myApp.firstCorrelation = myApp.calcCorrelation( 2 );
    </STARTUP>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_modulo"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Microstate">
         <block type="get_nspins"></block>
         <block type="get_field"></block>
         <block type="get_spin"></block>
         <block type="generate_microstate"></block>
         <block type="print_correlation"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      levelcomplete = !myApp.mismatchedEnergy
      if( myApp.firstCorrelation == 0 ){ levelcomplete = false; }
      myApp.firstCorrelation = 0; 
    </FINISH>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
      Now calculate and plot a graph that shows $r$ on the $x$-axis and that on the $y$ axis shows the degree of correlation between the spins that 
      are $r$ lattice sites appart.  You should do this for a single configuration only.  Remember that the degree of correlation between two spins 
      that are separated by $r$ lattice sites is measured using
      $\delta(r) = \frac{ \sum_{i=1}^N ( s_i - \langle s \rangle )( s_{i+r} - \langle s \rangle ) }{ \sum_{i=1}^N ( s_i - \langle s \rangle )^2 }$
    </DESCRIPTION>
    <HINT>
    </HINT>
    <STARTUP>
      ising.generateRandomState();
    </STARTUP>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_modulo"></block>
      </category>
      <category name="Microstate">
         <block type="get_nspins"></block>
         <block type="get_field"></block>
         <block type="get_spin"></block>
      </category>
      <category name="Lists">
         <block type="lists_repeat"> </block>
         <block type="lists_getIndex"></block>
         <block type="lists_setIndex"></block>
      </category>
      <category name="Plotting">
         <block type="draw_line_graph"></block>
      </category>
    </TOOLBOX>
    <FINISH>
       myApp.mismatchedEnergy = false; 
       for(var i=0; i &lt; ising.spins.length/2; i++){
           if( myplot.data[2+i][0]!=i || myApp.calcCorrelation(i) != myplot.data[2+i][1] ){ myApp.mismatchedEnergy = true; }
       } 
    </FINISH>
  </LEVEL>
  <REVIEW>
     You should now be able to calculate the average correlation function for a set of microstates.  Essentially you do what you did
     in the second level for all the elements of the vector that you calculated in the third level.  Furthermore, you can even calculate
     a correlation function when the data is weighted by using what you learnt how to do in the histograms exercise with weighted data.
  </REVIEW>
</PAGE>
