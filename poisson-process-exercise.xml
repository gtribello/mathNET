<PAGE>
  <TITLE> Markov chains in continuous time </TITLE>
  <HEADER>
     <script src="assets/scripts/plottingTools.js" type="text/javascript"> </script>
  </HEADER>
  <WELCOME>
     In this exercise we are going to learn how to simulate some Markov chains in continuous time so that you can extend on these ideas as you work on the extend exercises. 
  </WELCOME>
  <WORKSPACE>
    <table>
      <tr>
        <td>
          <div id="graph" style="width: 400px"></div>
        </td>
        <td width="10px"> nbsp;nbsp; </td>
        <td rowspan="2">
          <div id="blocklyDiv" style="height: 400px"> </div>
        </td> 
      </tr>
    </table>
  </WORKSPACE>
  <APIFUNCTIONS>
    // Add graph functions to API
    addGraphFunctionsToApi( interpreter, scope );
  </APIFUNCTIONS>
  <BLOCKS>
  </BLOCKS>
  <SCRIPTS>
    myplot.data = [];

    // Load the Google Chart Tools Visualization API and the chart package.
    if (typeof google == 'object') {
      google.load('visualization', '1', {packages: ['corechart']});
    } else {
      alert('Unable to load Google\'s chart API.\n' +
            'Are you connected to the Internet?');
    }
  </SCRIPTS>
  <STARTUP>
    myplot.data.length = 0;
    myplot.data.unshift(['x', 'y'], [0, 0]);
    myplot.plotGraph('graph','scatter');
  </STARTUP>
  <LEVEL>
    <DESCRIPTION>
      Use the blocks below to generate an exponentially distributed random variable with parameter $\lambda=1$.  Generate 10 such random variables, $X_i$, and draw a graph showing in which each of your random variables is plotted at $(i,X_i)$.  Each of the $i$s here should just be one of the set of integers between 1 and 50.  This should be revision.
    </DESCRIPTION>
    <HINT>
      To do this you generate a uniform random variable between 0 and 1.  You then invert the cumulative probability distribution function for this variable and calculate the value of this inverse function for the random variable you generated.
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_single"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      prand = 0;
      for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i]=="uniform random variable between 0 and 1" ){ prand += 1; }
      }
      levelcomplete=true;
      if( prand != 1 || myplot.data.length &lt; 3 ){ levelcomplete=false; }
      for(var i=2; i &lt; myplot.data.length; i++ ){
           if( myplot.data[i][0]!=(i-1) ){ levelcomplete=false; }
      }
    </FINISH>
  </LEVEL> 
  <LEVEL>
    <DESCRIPTION>
      Use the information from the video and the blocks below to write a program that can simulate a poisson process.  Use the plotting tools to show the number of events that occur as a function of time.  
    </DESCRIPTION>
    <HINT>
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_single"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      prand = 0;
      for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i]=="uniform random variable between 0 and 1" ){ prand += 1; }
      }
      levelcomplete=true;
      if( prand != 1 || myplot.data.length &lt; 3 ){ levelcomplete=false; }
      for(var i=2; i &lt; myplot.data.length; i++ ){
           if( myplot.data[i][1]-Math.floor(myplot.data[i][1])!=0 ){ levelcomplete=false; }
           if( i>2 ){
               if( myplot.data[i][1]-myplot.data[i-1][1] != 1 ){ levelcomplete=false; }
               if( myplot.data[i][0] &lt; myplot.data[i-1][0] ){ levelcomplete=false; }
           }
      }
    </FINISH>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
       The ammount of money spent in a particular 24-hour shop can be modelled using a Compound Poisson process with parameters $\lambda=5$, $\mu=4$ and $\sigma^2=1$.  Use the blocks below to draw a graph that shows the result from a simulation that models how the ammount of money spent in this shop changes as a function of time. 
    </DESCRIPTION>
    <HINT>
       Notice that in a compound poisson process the total spend increases when an event occurs is a random variable.  In a poisson process the total number of events just increases by one when an event occurs.  
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_single"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
         <block type="normal_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      prand = 0; pnorm = 0;
      for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i]=="uniform random variable between 0 and 1" ){ prand += 1; }
           if( ww[i]=="standard normal random variable" ){ pnorm += 1; }
      }
      levelcomplete=true;  
      if( prand != 1 || pnorm != 1 || myplot.data.length &lt; 3 ){ levelcomplete=false; }
      for(var i=2; i &lt; myplot.data.length; i++ ){
           if( i>2 ){
               if( myplot.data[i][1]-myplot.data[i-1][1] &lt; 0 ){ levelcomplete=false; }
               if( myplot.data[i][0] &lt; myplot.data[i-1][0] ){ levelcomplete=false; }
           }
      }
    </FINISH>
  </LEVEL>
   <LEVEL>
    <DESCRIPTION>
       Use the blocks below to write a program to model the ammount of time it takes to transition from the intial state to the final state for the sucessive states model that was discussed in the video.  Generate 10 samples from this distribution and then calculate a sample mean and 80% confidence limits on your estimate of the mean.  Draw an error bar showing centered on the mean that shows the 80% confidence limit.
    </DESCRIPTION>
    <VID> https://youtu.be/4XBwnGKhyiE </VID>
    <HINT>
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_single"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_error_bar"></block>
      </category>
      <category name="Lists">
         <block type="lists_repeat"></block>
         <block type="lists_getIndex"></block>
         <block type="lists_setIndex"></block>
         <block type="lists_sort"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      prand = 0; 
      for(var i=0; i &lt; ww.length; i++ ){
          if( ww[i]=="uniform random variable between 0 and 1" ){ prand += 1; }
      }
      if( prand != 2 || myplot.data.length != 3 ){ levelcomplete=false; }
      if( myplot.error.length!=myplot.data.length-1 || myplot.data[i][2] &lt; 0 || myplot.data[i][2] &gt; 1 ){ levelcomplete=false; }
    </FINISH>
    <VIDEO> https://www.youtube.com/embed/dEzLR-tReEY </VIDEO>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>  
       Use the blocks below to write a program to model the ammount of time it takes to transition from the intial state to the final state for the parallel transitions model that was discussed in the video.  Generate 10 samples from this distribution and then calculate a sample mean and 80% confidence limits on your estimate of the mean.  Draw an error bar showin g centered on the mean that shows the 80% confidence limit.
    </DESCRIPTION>
    <VID> https://youtu.be/4XBwnGKhyiE </VID>
    <HINT>
       I have deliberately not given you a block for sorting your samples.  I have given you, however, a block for computing the inverse of the cumulative probility distribution function for a normal random variable.
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_single"></block>
         <block type="math_normal"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_error_bar"></block> 
      </category>
      <category name="Lists">
         <block type="lists_repeat"></block>
         <block type="lists_getIndex"></block>
         <block type="lists_setIndex"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      prand = 0; 
      for(var i=0; i &lt; ww.length; i++ ){ 
          if( ww[i]=="uniform random variable between 0 and 1" ){ prand += 1; }
      }
      if( prand != 3 || myplot.data.length != 3 ){ levelcomplete=false; }
      if( myplot.error.length!=myplot.data.length-1 || myplot.data[i][2] &lt; 0 || myplot.data[i][2] &gt; 1 ){ levelcomplete=false; }
    </FINISH>
    <VIDEO> https://www.youtube.com/embed/dEzLR-tReEY </VIDEO>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>              
       Use the blocks below to write a program to simulate any three state continuous time Markov chain with a stationary distirbution.  Draw a histogram showing the fraction of time that is spent in each of the two states in this chain.
    </DESCRIPTION>
    <VID> https://youtu.be/4XBwnGKhyiE </VID>
    <HINT>
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_single"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_bar_chart"></block>
      </category>
      <category name="Lists">
         <block type="lists_repeat"></block>
         <block type="lists_getIndex"></block>
         <block type="lists_setIndex"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      levelcomplete=true; var sum=0;
      if( myplot.data.length != 5 ){ levelcomplete=false; }
      for(var i=2; i &lt; myplot.data.length; i++ ){
           sum += myplot.data[i][1]
           if( myplot.data[i][0] != (i-1) || myplot.data[i][1] &gt; 1.0 || myplot.data[i][1] &lt; 0 ){ levelcomplete=false; }
      }
      if( sum &gt; 1.05 || sum &lt; 0.95 ){ levelcomplete=false; }
    </FINISH>
    <VIDEO> https://www.youtube.com/embed/dEzLR-tReEY </VIDEO>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
       Use the blocks below to write a program that simulates an M/M/1 queue.  Calculate the total ammount of time each person spends waiting in the queue and getting served and plot a histogram showing this distribution of service times.             
    </DESCRIPTION>
    <VID> https://youtu.be/4XBwnGKhyiE </VID>
    <HINT>
       If you have forgotten how to compute a histogram for samples of a continuous random variable look back at the exercise that you completed in week 3 on the normal distribution.
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block> 
         <block type="math_single"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_line_graph"></block>
      </category>
      <category name="Lists">
         <block type="lists_repeat"></block>
         <block type="lists_getIndex"></block>
         <block type="lists_setIndex"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      levelcomplete=true; var sum=0;
      for(var i=2; i &lt; myplot.data.length; i++ ){
           sum += myplot.data[i][1]
           if( myplot.data[i][0] &lt; 0 || myplot.data[i][1] &gt; 1.0 || myplot.data[i][1] &lt; 0 ){ levelcomplete=false; }
      }
      if( sum &gt; 1.05 || sum &lt; 0.95 ){ levelcomplete=false; }
    </FINISH>
    <VIDEO> https://www.youtube.com/embed/dEzLR-tReEY </VIDEO>
  </LEVEL>
  <REVIEW>
     The exercise you have just performed has taught you the basics of simulating continuous time Markov chains.  You will need to use everything that you have learnt by performing 
     these exercises when you perform the final two pieces of coursework for this module.
  </REVIEW>
</PAGE>
