<PAGE>
  <TITLE> Estimating probability mass functions and probability density functions </TITLE>
  <HEADER>
     <script src="assets/scripts/plottingTools.js" type="text/javascript"> </script>
  </HEADER>
  <WELCOME>
     This exercise is going to teach you about how we can use the central limit theorem to obtain an estimate of the probability mass/density function.  
     Use all your notes on these types of random variables and all the resources you can find online as you work through this exercise.  Also make sure 
     that you look at the working python code that is generated from the blocks as ultimately you will want to use this code in your own programs.  
  </WELCOME>
  <WORKSPACE>
    <table>
      <tr>
        <td>
          <div id="visualization" style="width: 400px"> <canvas id="myCanvas" width="400" height="400"></canvas> </div>
        </td>
        <td width="10px"> nbsp;nbsp; </td>
        <td rowspan="2">
          <div id="blocklyDiv" style="height: 800px"> </div>
        </td> 
      </tr>
      <tr>
        <td> <div id="graph" style="width: 400px"></div> </td>
        <td width="10px"> nbsp;nbsp; </td>
      </tr>
    </table>
  </WORKSPACE>
  <APIFUNCTIONS>
  </APIFUNCTIONS>
  <BLOCKS>
  </BLOCKS>
  <SCRIPTS>
  </SCRIPTS>
  <STARTUP>
  <LEVEL>
    <DESCRIPTION>
       This exercise should be revision: Use the blocks below to generate 50 binomial random variables from a distribution with $n=6$ and $p=0.5$.  
       You should plot each of these random variables on the graph.  The $i$th random variable you generate, $X_i$, should be at the coordinate $(i,X_i)$. 
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
    </FINISH>
  </LEVEL> 
  <LEVEL>
    <DESCRIPTION>
      Use the blocks below to generate 50 binomial random variables from a distribution with $n=6$ and $p=0.5$.  Each of these random variables
      will take a value of either 0, 1, 2, 3, 4, 5 or 6 so now instead of plotting each of the random variables on the graph I would like you to 
      use the blocks below to count the number of times each of the random variables come up and to plot how these counts of the number times a 
      particular number comes up changes with time. 
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX> 
    <FINISH>
    </FINISH>
  </LEVEL> 
  <LEVEL>
    <DESCRIPTION>
      In the last exercise you should have plotted the number of times each of the random variables came up.  What I would now like you to do is to 
      plot the fraction of times each of the random variables came up in the experiment.  If you do this correctly the sum of all the fractions will 
      be equal to one.
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
    </FINISH>
  </LEVEL> 
  <LEVEL>
    <DESCRIPTION>
      The programs you wrote in the previous two exercises execute very slowly because we update the plotted graph on every single step.  In addition, writing a python script
      that outputs a movie is well beyond the scope of the programming you need to do in this module.  In this exercise you are thus asked to repeat the exercise that you just
      performed but to use a list to record the number of times the binomial random variable took each of the possible values.  You should then only plot the final histogram 
      once all the random variables are generated. 
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
    </FINISH>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
       We are now going to repeat the exercise of calculating a histogram that we just performed but we are going to do the exercise for a normal random variable.
       Divide the range between -4 and +4 into 400 sub-ranges of length 0.02 and create a list with one scalar for each or the sub-ranges in this range.  Now use the 
       blocks below to generate 50 random variables from a normal distribution with mean 0 and variance 1.  Use the list that you created to count the number of times
       the random variable falls into each of the sub-ranges.  Once you have generated all the random variables plot a graph showing the fraction of times that the 
       random variable fell into each of the sub-ranges of interest.   
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
    </FINISH>
  </LEVEL>
  <REVIEW>
     In this exercise you have learnt how we use the central limit theorem and the law of large numbers to estimate probability mass functions and probability density functions 
     from identically distributed and indepedent random variables.

     To consolidate what you have learnt write a python notebook that repeats the last exercise above - the estimation of the probability density function for the normal distribution.
     Try to work out how to calculate the cumulative probability distribution function from this probability mass function (hint: you will need to integrate the probability density
     function you estimated numerically).  Try to do this exercise with different numbers of subranges.  In your notes discuss using suitable diagrams how the shape of the cumulative 
     probability distribution function you obtain through this procedure differs from the shape of the true cumulative probability distribution function.
  </REVIEW>
</PAGE>
