<PAGE>
  <TITLE> Ising Model Monte Carlo </TITLE>
  <HEADER>
     <script src="assets/scripts/isingSpinControls.js" type="text/javascript"> </script>
  </HEADER>
  <WELCOME>
     This exercise will teach you how Monte Carlo simulations work.  You will, through the course of the 
     exercise, learn how to write your own Monte Carlo code for simulating a one dimensional closed Ising Model.
  </WELCOME>
  <SLIDERS>
    <div id="nslider">
      Number of spins: <input id="slide" type="range" min="5" max="100" step="5" value="25" onchange="ising.setNumberOfSpins(this.value)"/> 
    </div>
    <div id="hslider">
      Magnetic field strength: <input id="slide" type="range" min="-5" max="5" step="1" value="0" onchange="ising.setMagneticField(this.value)"/>
    </div>
    <div id="tslider">
      Temperature:  <input id="slide" type="range" min="0" max="10" step="1" value="1" onchange="ising.setTemperature(this.value)"/> 
    </div>
  </SLIDERS>
  <WORKSPACE>
    <canvas id="myCanvas" width="400" height="400"></canvas>
  </WORKSPACE>
  <APIFUNCTIONS>
    // Add ising functions to API
    addIsingFunctionsToApi( interpreter, scope );     

    // Add API function for printing energy
    var wrapper = function(id){
      id = id ? id.toString() : '';
      return interpreter.createPrimitive(myApp.printEnergy(id));
    };
    interpreter.setProperty(scope, 'printEnergy', interpreter.createNativeFunction(wrapper)) 
  </APIFUNCTIONS>
  <BLOCKS>
    Blockly.Blocks["print_energy"] = {
      init: function() {
        this.jsonInit({
          "message0": "print energy %1",
          "args0": [
            {
              "type": "input_value",
              "name": "n",
              "check": "Number"
            }
          ],
          "inputsInline": true,
          "nextStatement": null,
          "previousStatement": null,
          "colour": Blockly.Blocks.variables.HUE,
          "tooltip": Blockly.Msg.VARIABLES_SET_TOOLTIP,
          "helpUrl": Blockly.Msg.VARIABLES_SET_HELPURL
        })
      }
    };

    Blockly.JavaScript['print_energy'] = function(block) {
      var s = Blockly.JavaScript.valueToCode(block, 'n', Blockly.JavaScript.ORDER_ATOMIC) || '0';
      var code = 'printEnergy(' + s + ');\n';
      return code;
    };

    Blockly.Python['print_energy'] = function(block) {
      var s = Blockly.Python.valueToCode(block, 'n', Blockly.Python.ORDER_ATOMIC) || '0';
      var code = 'print("Energy equals",' + s + ')\n';
      return code;
    };
  </BLOCKS>
  <SCRIPTS>
    myApp.mismatchedEnergy = false;

    myApp.printEnergy = function( eng ){
      ctx = document.getElementById("myCanvas").getContext("2d");
      ctx.beginPath();
      ctx.moveTo( 100,100 );
      ctx.lineTo( 100,300 );
      ctx.lineTo( 300,300 );
      ctx.lineTo( 300,100 );
      ctx.lineTo( 100,100 );
      ctx.closePath();
      ctx.fillStyle = '#FFFFFF';
      ctx.fill(); 
      energy = -ising.spins[0]*ising.spins[ising.spins.length-1] - ising.spins[0]*ising.magneticFieldStrength;
      for(var i = 1; i &lt; ising.spins.length; i++){
          energy += -ising.spins[i-1]*ising.spins[i] - ising.magneticFieldStrength*ising.spins[i];
      }
      if( energy != eng ){ 
          alert("mismatch for system energy expecting " + energy + " got " + eng );
          myApp.mismatchedEnergy = true; 
      }
      ctx.fillStyle = '#000000';
      ctx.font="20px Georgia";
      ctx.fillText("Energy equals " + eng,110,180);
    };
  </SCRIPTS>
  <STARTUP>
    ising.setNumberOfSpins(ising.nspins);
    ising.setMagneticField(0);
  </STARTUP>
  <LEVEL>
    <DESCRIPTION>
      Use the blocks provided to set the microscopic coordinates of all the spins in the system equal to 1 
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Microstate">
         <block type="get_nspins"></block>
         <block type="set_spin"></block>
      </category>
    </TOOLBOX>
    <FINISH>
       levelcomplete=true;
       for(var i=0; i &lt; ising.spins.length; i++ ){
           if( ising.spins[i]!=1 ){ levelcomplete=false; }
       }
    </FINISH>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
      Use the blocks provided to set the microscopic coordinates of all the odd numbered spins in the system to 1 and all the even 
      numbered spins in the system to -1.  
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
        <block type="math_number_property"></block>
      </category>
      <category name="Microstate">
         <block type="get_nspins"></block> 
         <block type="set_spin"></block>
      </category>
    </TOOLBOX>
    <FINISH>
       levelcomplete=true;
       for(var i=0; i &lt; ising.spins.length; i++ ){
           if( i%2==0 &amp;&amp; ising.spins[i]!=-1 ){ levelcomplete=false; }
           if( i%2==1 &amp;&amp; ising.spins[i]!=1 ){ levelcomplete=false; }
       }
    </FINISH>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
      Use the blocks provided to generate a random configuration for the microscopic coordinates of all the spins.
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
        <block type="math_number_property"></block>
      </category>
      <category name="Microstate">
         <block type="get_nspins"></block>
         <block type="set_spin"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
    </TOOLBOX>
    <FINISH> 
       levelcomplete=false;
       ww = myApp.workspace.getAllBlocks(); 
       for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i]=="uniform random variable between 0 and 1" ){ levelcomplete=true; }
       }
       for(var i=0; i &lt; ising.spins.length; i++ ){
           if( ising.spins[i]!=-1 &amp;&amp; ising.spins[i]!=1 ){ levelcomplete=false; }
       }
    </FINISH>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
      Use the blocks provided to generate a random configuration for the microscopic coordinates of all the spins.
      Then select one of the spin coordinates at random and flip the value of this spin.
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_round"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
        <block type="math_number_property"></block>
      </category>
      <category name="Microstate">
         <block type="get_nspins"></block>
         <block type="set_spin"></block>
         <block type="get_spin"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
    </TOOLBOX>
    <FINISH>
       nuniform = 0;
       nsp_cal = 0
       ww = myApp.workspace.getAllBlocks();
       for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i]=="uniform random variable between 0 and 1" ){ nuniform += 1; }
           if( ww[i]=="number of spins" ){ nsp_cal += 1; }
       }
       if( nuniform!=2 || nsp_cal!=2 ){ levelcomplete = false; }
       for(var i=0; i &lt; ising.spins.length; i++ ){
           if( ising.spins[i]!=-1 &amp;&amp; ising.spins[i]!=1 ){ levelcomplete=false; }
       }
    </FINISH>
  </LEVEL>
 <LEVEL>
    <DESCRIPTION>
      Use the blocks provided to generate a random configuration for the microscopic coordinates of all the spins.
      Then make your code repeat the process of flipping one randomly chosen spin a total of 10 times.
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_round"></block> 
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
        <block type="math_number_property"></block>
      </category>
      <category name="Microstate">
         <block type="get_nspins"></block>
         <block type="set_spin"></block>
         <block type="get_spin"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
    </TOOLBOX>
    <FINISH>
       ndo = 0;
       nuniform = 0;
       ww = myApp.workspace.getAllBlocks();
       for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i]=="uniform random variable between 0 and 1" ){ nuniform += 1; }
           if( ww[i].toString().search("repeat") &gt;= 0 ){ ndo += 1; }
       }
       if( nuniform!=2 ||  ndo!=2 ){ levelcomplete = false; }
       for(var i=0; i &lt; ising.spins.length; i++ ){
           if( ising.spins[i]!=-1 &amp;&amp; ising.spins[i]!=1 ){ levelcomplete=false; }
       }    
    </FINISH>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
      At the end of the previous level we implemented a Monte Carlo integrator that accepted all moves and that therefore operated at infiite temperature.  To
      operate at finite temperature we are going to have to calculate the energy.  Use the blocks provided to generate a random configuration of spins and then  
      calculate the energy of this microstate using the Ising model Hamiltonian.  Once the energy has been calculated you 
      should report it to the screen using the print energy block.
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
        <block type="math_number_property"></block>
      </category>
      <category name="Microstate">
         <block type="get_nspins"></block>
         <block type="get_field"></block> 
         <block type="set_spin"></block>
         <block type="get_spin"></block>
         <block type="print_energy"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
    </TOOLBOX>
    <FINISH>
       peng = 0;
       levelcomplete=false;
       ww = myApp.workspace.getAllBlocks();
       for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i]=="get magnetic field strength" ){ levelcomplete=true; }
           if( ww[i].toString().search("print energy") &gt;=0 ){ peng += 1; }
       }
       if( peng==0 ){ levelcomplete=false; }
       for(var i=0; i &lt; ising.spins.length; i++ ){
           if( ising.spins[i]!=-1 &amp;&amp; ising.spins[i]!=1 ){ levelcomplete=false; }
       } 
       if( myApp.mismatchedEnergy ){ levelcomplete=false; myApp.mismatchedEnergy=false; }
    </FINISH>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
      Lets now generate a trajectory of 11 frames using what we learnt while programming the code for the last but one level.
      Generate a first configuration at random and then calculate the energy using the Ising model Hamiltonian for each of the microstates 
      you generate by flipping, randomly-chosen individual spins and report these to screen.  You will need to include the code to calculate the energy 
      of the system twice in this program so you will probably find it useful to write a function that calculates the energy and returns it.
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_round"></block> 
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
        <block type="math_number_property"></block>
      </category>
      <category name="Microstate">
         <block type="get_nspins"></block>
         <block type="set_spin"></block>
         <block type="get_field"></block>
         <block type="get_spin"></block>
         <block type="print_energy"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Functions" custom="PROCEDURE"></category>
    </TOOLBOX>
    <FINISH>
       ndo = 0;
       peng = 0;
       nfunc = 0;
       nuniform = 0;
       levelcomplete=false;
       ww = myApp.workspace.getAllBlocks();
       for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i].toString().search("repeat") &gt;= 0 ){ ndo += 1; }
           if( ww[i].toString().search("return") &gt;= 0 ){ nfunc += 1; }
           if( ww[i]=="uniform random variable between 0 and 1" ){ nuniform += 1; }
           if( ww[i]=="get magnetic field strength" ){ levelcomplete=true; }
           if( ww[i].toString().search("print energy") &gt;=0 ){ peng += 1; } 
       }   
       if( peng == 0 || ndo &lt; 3 || nfunc &lt; 1 || nuniform &lt; 2 ){ levelcomplete=false; } 
       for(var i=0; i &lt; ising.spins.length; i++ ){
           if( ising.spins[i]!=-1 &amp;&amp; ising.spins[i]!=1 ){ levelcomplete=false; }
       }   
       if( myApp.mismatchedEnergy ){ levelcomplete=false; myApp.mismatchedEnergy=false; }
    </FINISH>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
      The arrangement of blocks you should have just arrived at provides almost everything we need for our 
      Monte Carlo integrator.  Can you finish off the code by implementing the Metropolis accept/reject criteria as well.
      Make sure you only report the energies of the accepted configurations to screen.
    </DESCRIPTION>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
         <block type="math_round"></block>
         <block type="math_single"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
        <block type="math_number_property"></block>
      </category>
      <category name="Microstate">
         <block type="get_nspins"></block>
         <block type="set_spin"></block>
         <block type="get_spin"></block>
         <block type="get_temperature"></block>
         <block type="print_energy"></block>
      </category>
     <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Functions" custom="PROCEDURE"></category>
    </TOOLBOX>
    <FINISH>
       ndo = 0;
       nif = 0;
       peng = 0;
       nfunc = 0;
       nuniform = 0; 
       levelcomplete=false;
       ww = myApp.workspace.getAllBlocks();
       for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i].toString().search("repeat") &gt;=0 ){ ndo += 1; }
           if( ww[i].toString().search("return") &gt;=0 ){ nfunc += 1; }
           if( ww[i].toString().search("if") &gt;= 0 ){ nif += 1; }
           if( ww[i]=="uniform random variable between 0 and 1" ){ nuniform += 1; }
           if( ww[i]=="get magnetic field strength" ){ levelcomplete=true; }
           if( ww[i].toString().search("print energy") &gt;=0 ){ peng += 1; }
       }
       if( peng==0 || ndo &lt; 3 || nfunc &lt; 1 || nuniform &lt; 3 || nif &lt; 2 ){ levelcomplete=false; }
       for(var i=0; i &lt; ising.spins.length; i++ ){
           if( ising.spins[i]!=-1 &amp;&amp; ising.spins[i]!=1 ){ levelcomplete=false; }
       }
       if( myApp.mismatchedEnergy ){ levelcomplete=false; myApp.mismatchedEnergy=false; }
    </FINISH>
  </LEVEL>
</PAGE>
