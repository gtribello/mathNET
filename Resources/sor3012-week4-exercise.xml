<PAGE>
  <TITLE> An introduction to Monte Carlo integration </TITLE>
  <HEADER>
     <script src="assets/scripts/plottingTools.js" type="text/javascript"> </script>
  </HEADER>
  <WELCOME>
     In this exercise you are going to learn how we can use probability theory to calculate integrals approximately using a technique called Monte Carlo integration.  We are also going to learn about how we can obtain appropriate error bars on the integrals we calculate in this way by using resampling and bootstrapping.  As you will see all of these methods work by repeatedly sampling a distribution and by then extracting a sample mean.  You are going to use this idea repeatedly thoughout the rest of the course so it is worth making sure that you understand the basic idea now.
  </WELCOME>
  <WORKSPACE>
    <table>
      <tr>
        <td>
          <div id="graph" style="width: 400px"></div>
        </td>
        <td width="10px"> nbsp;nbsp; </td>
        <td rowspan="2">
          <div id="blocklyDiv" style="height: 400px"> </div>
        </td> 
      </tr>
    </table>
  </WORKSPACE>
  <APIFUNCTIONS>
    // Add graph functions to API
    addGraphFunctionsToApi( interpreter, scope );
  </APIFUNCTIONS>
  <BLOCKS>
  </BLOCKS>
  <SCRIPTS>
    myplot.data = [];

    // Load the Google Chart Tools Visualization API and the chart package.
    if (typeof google == 'object') {
      google.load('visualization', '1', {packages: ['corechart']});
    } else {
      alert('Unable to load Google\'s chart API.\n' +
            'Are you connected to the Internet?');
    } 
  </SCRIPTS>
  <STARTUP>
    myplot.data.length = 0;
    myplot.data.unshift(['x', 'y'], [0, 0]);
    myplot.error.length = 0;
    myplot.error.unshift(0);
    myplot.plotGraph('graph','scatter');
  </STARTUP>
  <LEVEL>
    <DESCRIPTION>
       This exercise should be revision: Use the block below to generate 20 pairs of uniform random variables $X_i$ and $Y_i$ that each lie between 0 and 1.
       Then plot each of these pairs of random variables at $(X_i, Y_i)$.   All the points you show should have $0 &lt; X_i &lt; 1$ and $0 &lt; Y_i &lt; 1$.
    </DESCRIPTION>
    <HINT>
       This should just be a matter of using the generate uniform random variable block twice.
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      prand = 0;
      for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i]=="uniform random variable between 0 and 1" ){ prand += 1; }
      }
      levelcomplete=true;
      if( prand != 2 || myplot.data.length &lt; 3 ){ levelcomplete=false; }
      for(var i=2; i &lt; myplot.data.length; i++ ){
           if( myplot.data[i][0] &lt; 0 || myplot.data[i][1] &lt; 0 || myplot.data[i][0] &gt; 1 || myplot.data[i][1] &gt; 1 ){ levelcomplete=false; }
      }
    </FINISH>
    <VIDEO> https://www.youtube.com/embed/mtHBKU_rUQo </VIDEO>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
       Now use the blocks below to generate 25 points on the graph shown on the right.  These points should be at $(0.1 + i*0.2, 0.1 + j*0.2)$ with $i \in \{0,1,2,3,4\}$ and $j \in \{0,1,2,3,4\}$. 
    </DESCRIPTION>
    <VID> https://youtu.be/mtHBKU_rUQo </VID>
    <HINT>
       You should be generating a grid of points and, as discussed in the video, you will need to use a double loop. 
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      levelcomplete=true;
      if( myplot.data.length != 27 ){ levelcomplete=false; }
      for(var i=0; i &lt; 5; i++ ) {
          var xval = 0.1 + i*0.2;
          for(var j=0; j &lt; 5; j++ ) {
              var yval = 0.1 + j*0.2; var found=false;
              for(var k=2; k &lt; myplot.data.length; k++ ) {
                  if( (xval-0.005) &lt; myplot.data[k][0] &amp;&amp; (xval+0.005) &gt; myplot.data[k][0] &amp;&amp;
                      (yval-0.005) &lt; myplot.data[k][1] &amp;&amp; (yval+0.005) &gt; myplot.data[k][1] ) { found=true; break; }
              }
              if( !found ){ levelcomplete=false; }
          }
      }
    </FINISH>
    <VIDEO> https://www.youtube.com/embed/64oys2TFaHQ </VIDEO>
  </LEVEL> 
  <LEVEL>
    <DESCRIPTION>
       Use the blocks below to generate 25 points on the graph shown on the right.  These points should again be at $(0.1 + i*0.2, 0.1 + j*0.2)$ with $i \in \{0,1,2,3,4\}$ and $j \in \{0,1,2,3,4\}$.  Now though I only want you to display the points if they lie within a circle of radius one that is centered on the origin.
    </DESCRIPTION>
    <VID> https://youtu.be/64oys2TFaHQ </VID>
    <HINT>
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Plotting">
         <block type="draw_point"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      levelcomplete=true;
      for(var i=0; i &lt; 5; i++ ) {
          var xval = 0.1 + i*0.2;
          for(var j=0; j &lt; 5; j++ ) {
              var yval = 0.1 + j*0.2; 
              if( xval*xval + yval*yval &lt; 1.0 ) {
                  var found=false;
                  for(var k=2; k &lt; myplot.data.length; k++ ) {
                      if( (xval-0.005) &lt; myplot.data[k][0] &amp;&amp; (xval+0.005) &gt; myplot.data[k][0] &amp;&amp;
                          (yval-0.005) &lt; myplot.data[k][1] &amp;&amp; (yval+0.005) &gt; myplot.data[k][1] ) { found=true; break; }
                  }
                  if( !found ){ levelcomplete=false; }
              }
          }
      }
    </FINISH>
    <VIDEO> https://www.youtube.com/embed/wz3K_7t2spU </VIDEO>
  </LEVEL> 
  <LEVEL>
    <DESCRIPTION>
       Let's now reintroduce the random variables.  Select a random point $(X,Y)$ by generating two uniform random variables between 0 and 1, $X$ and $Y$, and determine whether the point you selected is within a circle of radius one that is centred on the origin.  Set the bernoulli random variable $Z$ equal to one if $(X,Y)$ is within the circle and zero otherwise.  Use the blocks below to generate a sample of $Z$ values and draw a graph showing how the sample mean, $\mu_n = \frac{1}{n} \sum_{i=1}^n Z_i$ for the random variable $Z$ changes as the number of indepedent random variables in the sample (the number of $Z_i$ values) increases.  In other words, plot a graph with points at $(n,\mu_n)$ for $n$ values between 0 and 20.  
    </DESCRIPTION>
    <VID> https://youtu.be/wz3K_7t2spU </VID>
    <HINT>
     Remember the sample mean is just the sum of all your random variables divided by the total number of random variables you have generated.
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_list"></block>
      </category>
      <category name="Lists">
         <block type="lists_repeat"> </block>
         <block type="lists_getIndex"></block>
         <block type="lists_setIndex"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      prand = 0;
      for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i]=="uniform random variable between 0 and 1" ){ prand += 1; }
      }
      levelcomplete=true;
      if( prand != 2 || myplot.data.length &lt; 3 ){ levelcomplete=false; }
      for(var i=2; i &lt; myplot.data.length; i++ ){
           if( myplot.data[i][0]!=(i-1) || myplot.data[i][1] &lt; 0 || myplot.data[i][1] &gt; 1 ){ levelcomplete=false; }
      }
    </FINISH>
    <VIDEO> https://www.youtube.com/embed/0ISUsHEPxSY </VIDEO>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
       Compute a set of 10 samples of the integral that you computed during the last exercise.  Calculate each estimate of the sample mean by generating 5 $Z$ values.  Use the plotting to display the mean of your 10 samples of the integral together with an error bar indicating the 90% confidence limit on your estimate for the integral.  Use the distance between the further away percentile and the median as the width of the error bar.
    </DESCRIPTION>
    <VID> https://youtu.be/0ISUsHEPxSY </VID>
    <HINT>
       To do this exercise you need to use the resampling technique that was discussed in the video.
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block>
      </category>
      <category name="Plotting">
         <block type="draw_error_bar"></block>
      </category>
      <category name="Lists">
         <block type="lists_repeat"> </block>
         <block type="lists_getIndex"></block>
         <block type="lists_setIndex"></block>
         <block type="lists_sort"></block>
      </category>
    </TOOLBOX>
    <FINISH>
      prand = 0;
      for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i]=="uniform random variable between 0 and 1" ){ prand += 1; }
      }
      levelcomplete=true;
      if( prand != 2 || myplot.data.length &lt; 3 ){ levelcomplete=false; }
      if( myplot.error.length!=myplot.data.length-1 || myplot.data.length != 3 || myplot.data[2][1] &lt; 0 || myplot.data[2][1] &gt; 1 ){ levelcomplete=false; }
    </FINISH>
    <VIDEO> https://www.youtube.com/embed/505vxcAewqM </VIDEO>
  </LEVEL>
  <LEVEL>
    <DESCRIPTION>
       Compute the integral that you computed during the last exercise by sampling only once.  Calculate the 80% confidence limits on your sample by bootstrapping and display your estimate of the integral together with an error bar indicating the 80% confidence limit on your estimate for the integral.  Use the distance between the further away percentile and the median as the width of the error bar.
    </DESCRIPTION>
    <VID> https://youtu.be/505vxcAewqM </VID>
    <HINT>
       To do the bootstrapping you need to generate a set of samples of a bernoulli random variable.
    </HINT>
    <TOOLBOX>
      <category name="Variables" custom="VARIABLE"></category>
      <category name="Program">
         <block type="controls_repeat_ext"></block>
         <block type="math_arithmetic"></block>
         <block type="math_number"></block>
      </category>
      <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
      </category>
      <category name="Random">
         <block type="uniform_random"></block> 
      </category>
      <category name="Plotting">
         <block type="draw_error_bar"></block>
      </category>
      <category name="Lists">
         <block type="lists_repeat"> </block>
         <block type="lists_getIndex"></block>
         <block type="lists_setIndex"></block> 
         <block type="lists_sort"></block>
      </category> 
    </TOOLBOX>
    <FINISH>
      prand = 0;
      for(var i=0; i &lt; ww.length; i++ ){
           if( ww[i]=="uniform random variable between 0 and 1" ){ prand += 1; }
      }
      levelcomplete=true; 
      if( prand != 3 || myplot.data.length &lt; 3 ){ levelcomplete=false; } 
      if( myplot.error.length!=myplot.data.length-1 || myplot.data.length != 3 || myplot.data[2][1] &lt; 0 || myplot.data[2][1] &gt; 1 ){ levelcomplete=false; }
    </FINISH>
  </LEVEL>
   <REVIEW>
       Congratulations on completing the exercise!  You should have made notes on what you did within a python notebook as you worked through the tasks.  Take a moment now to review your notes.  Make sure that all the python code you have copied works and that you have notes that explain what it all does.  Furthermore, <b> please note that when you apply the Monte Carlo integration, resampling and bootstrapping techniques you should use many more samples than we did in this exercise when calculating means and characterising the distribution.</b> Take a look at some of exercises on the extend page for this section of the module now and see if you can work out how to apply what you have just learnt to these problems.   
   </REVIEW>
</PAGE>
